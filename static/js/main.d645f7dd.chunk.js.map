{"version":3,"sources":["logo.svg","components/image_grid/index.js","components/header/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageGrid","props","state","imageGrid","this","sessionId","axios","post","session","then","res","imageGridData","data","map","result","Col","style","display","justifyContent","marginBottom","key","image","Card","padding","CardBody","CardTitle","textAlign","label","src","maxWidth","Button","color","width","marginTop","onClick","openDetectedImage","setState","e","window","location","href","Container","url","React","Component","Header","Jumbotron","className","Footer","Alert","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","App","files","source","options","type","match","params","id","buttonText","buttonColor","response","JSON","parse","reload","acceptedFileTypes","labelIdle","allowMultiple","maxFileSize","allowFileSizeValidation","server","process","headers","onload","loaded","margin","copyToClipBoard","dummy","document","createElement","text","body","appendChild","value","select","execCommand","removeChild","Boolean","hostname","ReactDOM","render","StrictMode","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d645f7dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport axios from \"axios\";\nimport {Container, Col, Card, CardBody, CardTitle, Button} from 'reactstrap';\n\n\nexport default class ImageGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageGrid: \"\"\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.sessionId !== \"new\") {\n            axios.post(\"http://104.42.38.143:5000/api/images/lookup\", {\n                session: this.props.sessionId\n            }).then((res) => {\n                try {\n                    let imageGridData = res.data.data.map((result) =>\n                        <Col style={{display: \"flex\", justifyContent: \"center\", marginBottom: \"20px\"}}\n                             key={result.image}>\n                            <Card style={{padding: \"10px\"}}>\n                                <CardBody>\n                                    <CardTitle style={{textAlign: \"center\"}}><b>{result.label}</b></CardTitle>\n                                </CardBody>\n                                <img src={\"http://104.42.38.143/uploads/\" + this.props.sessionId + \"/\" + result.image} style={{maxWidth: '400px'}}/>\n                                <div><Button color=\"primary\" style={{width: \"100%\", marginTop: \"10px\"}}\n                                             onClick={() => this.openDetectedImage(\"http://104.42.38.143/uploads/\" + this.props.sessionId + \"/out/\" + result.image)}>View\n                                    Detected Image</Button></div>\n                            </Card>\n                        </Col>)\n                    this.setState({\n                        imageGrid: imageGridData\n                    })\n                }\n                catch (e) {\n                    window.location.href = \"http://104.42.38.143/404\";\n                }\n            })\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                    {this.state.imageGrid}\n            </Container>\n        )\n    }\n\n    openDetectedImage(url) {\n        window.location.href = url\n    }\n}","import React from 'react';\nimport { Jumbotron, Button } from 'reactstrap';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <Jumbotron>\n                <h4 className=\"display-4\">Phone Screen Damage Detection POC</h4>\n                <p className=\"lead\">This is a proof of concept for damage detection of phone screens.\n                    Labels that can be detected: <b><i>Cracked, Scratched</i></b></p>\n                <hr className=\"my-2\" />\n                <p>\n                    Upload your media file(s), wait for them to get processed and finally see your predicted outputs.</p>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { Alert } from 'reactstrap';\n\nexport const Footer = (props) => {\n    return (\n        <div>\n            <Alert color=\"secondary\" style={{textAlign: 'center'}}>\n                <b> Developed with <a href=\"https://react.com\">React.js</a> in New York</b>\n            </Alert>\n        </div>\n        );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {FilePond, registerPlugin} from \"react-filepond\";\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport ImageGrid from \"./components/image_grid\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from \"reactstrap/es/Container\";\nimport Button from \"reactstrap/es/Button\";\nimport Header from \"./components/header\";\nimport {Footer} from \"./components/footer\";\n\n\n// Register the plugins\nregisterPlugin(\n    FilePondPluginImageExifOrientation,\n    FilePondPluginImagePreview,\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize\n);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Set initial files, type 'local' means this is a file\n            // that has already been uploaded to the server (see docs)\n            files: [\n                {\n                    source: \"index.html\",\n                    options: {\n                        type: \"local\"\n                    }\n                }\n            ],\n            session: props.match.params.id || \"new\",\n            buttonText: \"Cppy Link to Clipboard\",\n            buttonColor: \"warning\"\n        };\n    }\n\n    loaded(response) {\n        if(this.state.session == \"new\") {\n            window.location.href = window.location.href + JSON.parse(response).session;\n            window.location.reload()\n        }\n        else {\n            window.location.reload();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Container style={{marginTop: \"20px\"}}>\n                    <Header />\n                    <FilePond\n                        acceptedFileTypes={[\"image/png\", \"image/jpg\", \"image/jpeg\"]}\n                        labelIdle={\"Upload an image with a <b>damaged phone screen</b>  to verify the functioning of this app. Accepts <b>.jpg, .jpeg, .png</b> files. <br/> Drag & Drop your files or <span class=\\\"filepond--label-action\\\">Browse</span>\"}\n                        allowMultiple={true}\n                        maxFileSize={\"10MB\"}\n                        allowFileSizeValidation={true}\n                        server={{\n                            url: \"http://104.42.38.143:5000/api/detect/single\" + \"?\" + this.state.session,\n                            process: {\n                                headers: {\"session\": \"new\"},\n                                onload: response => this.loaded(response)\n                            }\n                        }}\n                    />\n                    {this.state.session !== \"new\" && <Button color={this.state.buttonColor} style={{display: \"block\", width: \"80%\", margin: \"0 auto\"}}\n                            onClick={() => this.copyToClipBoard()}>{this.state.buttonText}</Button>}\n                    <br/>\n                </Container>\n                <ImageGrid sessionId={this.state.session}/>\n                <Container>\n                    <Footer/>\n                </Container>\n            </div>\n        );\n    }\n\n    copyToClipBoard() {\n        let dummy = document.createElement('input'),\n            text = window.location.href;\n        document.body.appendChild(dummy);\n        dummy.value = text;\n        dummy.select();\n        document.execCommand('copy');\n        document.body.removeChild(dummy);\n        this.setState({\n            buttonColor: \"primary\",\n            buttonText: \"Copied Link to Clipboard!\"\n        })\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <div>\n              <Switch>\n                  <Route path=\"/:id\" component={App}/>\n                  <Route path=\"/\" component={App}/>\n              </Switch>\n          </div>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}